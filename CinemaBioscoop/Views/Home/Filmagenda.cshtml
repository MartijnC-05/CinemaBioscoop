@using CinemaBioscoop.Database
@model List<Film>

@{
    ViewData["Title"] = "Filmagenda";
    ViewData["currentTab"] = "filmagenda";
}


<body>
    <div class="page-content">
        <H1>Filmagenda</H1> <br>

        <div class="custom-select" style="width:200px;">
          <select>
            <option value="0">Datum:</option>
            <option value="1">Vandaag</option>
            <option value="2">Morgen</option>
            <option value="3">Overmorgen</option>
          </select>
        </div> <br><br>

        @foreach(var film in Model)
        {
        <div class="filmagenda">
            <div class="filmagendafilm"> <img src="@film.Poster"> </div>
                <div class="informatiefilm">
                    <h3 class="title">@film.Naam</h3>
                    <div class="filmtijden">
                        <a href="/film/@film.Id/Bestellen">
                        <div class="tijdversie">
                            <h3>10:00 - 13:00</h3>
                            <h3>2D</h3>
                        </div></a>
                        <a href="/film/@film.Id/Bestellen">
                        <div class="tijdversie">
                            <h3>11:30 - 14:30</h3>
                            <h3>2D</h3>
                        </div></a>
                        <a href="/film/@film.Id/Bestellen">
                        <div class="tijdversie">
                            <h3>13:00 - 16:00</h3>
                            <h3>3D</h3>
                        </div></a>
                        <a href="/film/@film.Id/Bestellen">
                        <div class="tijdversie">
                            <h3>14:30 - 17:30</h3>
                            <h3>2D</h3>
                        </div></a>
                        <a href="/film/@film.Id/Bestellen">
                        <div class="tijdversie">
                            <h3>16:00 - 19:00</h3>
                            <h3>3D</h3>
                        </div></a>
                    </div>
                </div>
        </div>
        }
    </div>


<script>
var x, i, j, l, ll, selElmnt, a, b, c;
/*look for any elements with the class "custom-select":*/
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /*for each element, create a new DIV that will act as the selected item:*/
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /*for each element, create a new DIV that will contain the option list:*/
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /*for each option in the original select element,
    create a new DIV that will act as an option item:*/
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /*when an item is clicked, update the original select box,
        and the selected item:*/
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
      /*when the select box is clicked, close any other select boxes,
      and open/close the current select box:*/
      e.stopPropagation();
      closeAllSelect(this);
      this.nextSibling.classList.toggle("select-hide");
      this.classList.toggle("select-arrow-active");
    });
}
function closeAllSelect(elmnt) {
  /*a function that will close all select boxes in the document,
  except the current select box:*/
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}
/*if the user clicks anywhere outside the select box,
then close all select boxes:*/
document.addEventListener("click", closeAllSelect);
</script>

@*<script type="text/javascript">
    var today = new Date();
    var day = today.getDay();
    var daylist = ["Zondag","Maandag","Dinsdag","Woensdag ","Donderdag","Vrijdag","Zaterdag"];
    var monthlist = ["Januari","Februari","Maart","April","Mei","Juni","Juli","Augustus","September","Oktober","November","December"]
    var date = today.getDate();
    var month = today.getMonth();  
    document.getElementById("vandaag").innerHTML = daylist[day]+ " "+ date + " "+ monthlist[month];

    var tomorrow = new Date(today)
    tomorrow.setDate(tomorrow.getDate() + 1)
    var day = tomorrow.getDay();
    var date = tomorrow.getDate();
    var month = tomorrow.getMonth();  
    document.getElementById("morgen").innerHTML = daylist[day]+ " "+ date + " "+ monthlist[month];

    var overmorgen = new Date(today)
    overmorgen.setDate(overmorgen.getDate() + 2)
    var day = overmorgen.getDay();
    var date = overmorgen.getDate();
    var month = overmorgen.getMonth();  
    document.getElementById("overmorgen").innerHTML = daylist[day]+ " "+ date + " "+ monthlist[month];
  </script>*@

</body>